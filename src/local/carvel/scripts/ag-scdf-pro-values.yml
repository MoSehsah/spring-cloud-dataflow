scdf:
  deploy:
    binder:
      type: rabbit
    database:
      type: postgres
  server:
    env:
    
      # - name: spring.security.oauth2.client.registration.auth0.client-id
      #   value: jEwFvWDIMpMCVDoInNiseZmkfI1g117Z
      # - name: spring.security.oauth2.client.registration.auth0.client-secret
      #   value: OpTB33D8-MwkMJE_86eF-fg0lw0kj05aUAtq0wFnHU2ghakr-ZLhnjs4HqgCAagX
      # - name: spring.security.oauth2.client.registration.auth0.scope
      #   value: [openid, profile, email]
      # - name: spring.security.oauth2.client.provider.auth0.issuer-uri
      #   value: https://dev-d0h5rul0d3fmv60q.us.auth0.com/
      - name: spring.security.oauth2.client.registration.keycloak.client-id
        value: scdf-client
      - name: spring.security.oauth2.client.registration.keycloak.client-secret
        value: xj6o5dNEBF5uLaQOgmaKPuV8fqLpk3TN
      - name: spring.security.oauth2.client.registration.keycloak.scope
        # value: 'openid,email,groups,offline_access,profile,roles,dataflow.view,dataflow.create,dataflow.manage,dataflow.deploy,dataflow.destroy,dataflow.modify,dataflow.schedule'
        value: 'openid'
      - name: spring.security.oauth2.client.registration.keycloak.authorization-grant-type
        value: authorization_code
      # - name: spring.security.oauth2.client.registration.keycloak.authorization-grant-type
      #   value: password
      # - name: spring.security.oauth2.client.registration.keycloak.client-authentication-method
      #   value: post

      - name: spring.security.oauth2.client.provider.keycloak.issuer-uri
        value: http://keycloak.h2o-4-8791.h2o.vmware.com/realms/test
      - name: spring.security.oauth2.client.provider.keycloak.user-name-attribute
        value: user_name

      - name: spring.security.oauth2.resourceserver.opaquetoken.introspection-uri
        value: http://keycloak.h2o-4-8791.h2o.vmware.com/realms/test/protocol/openid-connect/token/introspect
      - name: spring.security.oauth2.resourceserver.opaquetoken.client-id
        value: scdf-client
      - name: spring.security.oauth2.resourceserver.opaquetoken.client-secret
        value: xj6o5dNEBF5uLaQOgmaKPuV8fqLpk3TN
      # - name: spring.security.oauth2.authorization.check-token-access
      #   value: 'isAuthenticated()'

      # - name: spring.security.oauth2.client.provider.keycloak.user-name-attribute
      #   value: username
      # - name: spring.cloud.dataflow.security.authorization.permit-all-paths
      #   value: '/authenticate,/security/info,/assets/**,/dashboard/logout-success-oauth.html,/favicon.ico,/management/**'

      - name: spring.cloud.dataflow.security.authorization.provider-role-mappings.keycloak.map-oauth-scopes
        value: 'true'
      - name: spring.cloud.dataflow.security.authorization.provider-role-mappings.keycloak.role-mappings.ROLE_VIEW
        value: dataflow.view
      - name: spring.cloud.dataflow.security.authorization.provider-role-mappings.keycloak.role-mappings.ROLE_CREATE
        value: dataflow.create
      - name: spring.cloud.dataflow.security.authorization.provider-role-mappings.keycloak.role-mappings.ROLE_MANAGE
        value: dataflow.manage
      - name: spring.cloud.dataflow.security.authorization.provider-role-mappings.keycloak.role-mappings.ROLE_DEPLOY
        value: dataflow.deploy
      - name: spring.cloud.dataflow.security.authorization.provider-role-mappings.keycloak.role-mappings.ROLE_DESTROY
        value: dataflow.destroy
      - name: spring.cloud.dataflow.security.authorization.provider-role-mappings.keycloak.role-mappings.ROLE_MODIFY
        value: dataflow.modify  
      - name: spring.cloud.dataflow.security.authorization.provider-role-mappings.keycloak.role-mappings.ROLE_SCHEDULE
        value: dataflow.schedule


      # - name: spring.security.oauth2.client.registration.keycloak.authorization-grant-type
      #   value: authorization_code
      # - name: spring.security.oauth2.client.registration.keycloak.redirect-uri
      #   value: '{baseUrl}/login/oauth2/code/{registrationId}'
      # - name: spring.security.oauth2.client.provider.keycloak.authorization-uri
      #   value: http://keycloak.h2o-4-8791.h2o.vmware.com/realms/test/protocol/openid-connect/auth

  #   service:
  #     type: LoadBalancer
    # image:
    #   repository: 'sehsahdemo.azurecr.io/scdf/scdf-pro-server'
  # ctr:
  #   image:
  #     repository: 'sehsahdemo.azurecr.io/scdf/spring-cloud-dataflow-composed-task-runner'
  # skipper:
  #   image:
  #     repository: 'sehsahdemo.azurecr.io/scdf/spring-cloud-skipper-server'
  # feature:
  #   monitoring:
  #     grafana:
  #       image:
  #         repository: 'sehsahdemo.azurecr.io/scdf/spring-cloud-dataflow-grafana-prometheus'
  # scdf:
  #   feature:
  #     monitoring:
  #       prometheusRsocketProxy:
  #         image:
  #           repository: 'micrometermetrics/prometheus-rsocket-proxy'
  registry:
    secret:
      ref: "reg-creds-dev-registry"